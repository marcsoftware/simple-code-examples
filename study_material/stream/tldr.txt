public class Optional1 {
Optional<String> optional = Optional.of("bam");
optional.isPresent();           // true
optional.get();                 // "bam"
optional.orElse("fallback");    // "bam"
optional.ifPresent((s) -> System.out.println(s.charAt(0)));     // "b"
* Examples how to avoid null checks with Optional:
* http://winterbe.com/posts/2015/03/15/avoid-null-checks-in-java/
public class Optional2 {
static class Outer {
Nested nested = new Nested();
public Nested getNested() {
return nested;
static class Nested {
Inner inner = new Inner();
public Inner getInner() {
return inner;
static class Inner {
String foo = "boo";
public String getFoo() {
return foo;
public static <T> Optional<T> resolve(Supplier<T> resolver) {
try {
T result = resolver.get();
return Optional.ofNullable(result);
catch (NullPointerException e) {
return Optional.empty();
Outer outer = new Outer();
resolve(() -> outer.getNested().getInner().getFoo())
.map(Outer::getNested)
.map(Nested::getInner)
.map(Inner::getFoo)
Optional.of(new Outer())
.flatMap(o -> Optional.ofNullable(o.nested))
.flatMap(n -> Optional.ofNullable(n.inner))
.flatMap(i -> Optional.ofNullable(i.foo))
import java.util.Optional;
public class Streams1 {
// filtering
// "aaa2", "aaa1"
.filter((s) -> s.startsWith("a"))
// "aaa1", "aaa2"
// mapping
.sorted((a, b) -> b.compareTo(a))
// "DDD2", "DDD1", "CCC", "BBB3", "BBB2", "AAA2", "AAA1"
// matching
boolean anyStartsWithA = stringCollection
.anyMatch((s) -> s.startsWith("a"));
System.out.println(anyStartsWithA);      // true
boolean allStartsWithA = stringCollection
.allMatch((s) -> s.startsWith("a"));
System.out.println(allStartsWithA);      // false
boolean noneStartsWithZ = stringCollection
.noneMatch((s) -> s.startsWith("z"));
System.out.println(noneStartsWithZ);      // true
// counting
long startsWithB = stringCollection
.filter((s) -> s.startsWith("b"))
System.out.println(startsWithB);    // 3
// reducing
Optional<String> reduced =
.reduce((s1, s2) -> s1 + "#" + s2);
reduced.ifPresent(System.out::println);
// "aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2"
import java.util.IntSummaryStatistics;
import java.util.Map;
import java.util.StringJoiner;
import java.util.stream.Collector;
import java.util.stream.Collectors;
public class Streams10 {
//        test6(persons);
//        test7(persons);
//        test8(persons);
test9(persons);
List<Person> filtered =
.filter(p -> p.name.startsWith("P"))
.collect(Collectors.toList());
System.out.println(filtered);    // [Peter, Pamela]
Map<Integer, List<Person>> personsByAge = persons
.collect(Collectors.groupingBy(p -> p.age));
personsByAge
.forEach((age, p) -> System.out.format("age %s: %s\n", age, p));
// age 18: [Max]
// age 23:[Peter, Pamela]
// age 12:[David]
Double averageAge = persons
.collect(Collectors.averagingInt(p -> p.age));
System.out.println(averageAge);     // 19.0
IntSummaryStatistics ageSummary =
.collect(Collectors.summarizingInt(p -> p.age));
System.out.println(ageSummary);
// IntSummaryStatistics{count=4, sum=76, min=12, average=19,000000, max=23}
.filter(p -> p.age >= 18)
.map(p -> p.name)
.collect(Collectors.joining(" and ", "In Germany ", " are of legal age."));
System.out.println(names);
// In Germany Max and Peter and Pamela are of legal age.
Map<Integer, String> map = persons
.collect(Collectors.toMap(
p -> p.age,
p -> p.name,
(name1, name2) -> name1 + ";" + name2));
System.out.println(map);
// {18=Max, 23=Peter;Pamela, 12=David}
private static void test7(List<Person> persons) {
() -> new StringJoiner(" | "),          // supplier
(j, p) -> j.add(p.name.toUpperCase()),  // accumulator
(j1, j2) -> j1.merge(j2),               // combiner
StringJoiner::toString);                // finisher
private static void test8(List<Person> persons) {
private static void test9(List<Person> persons) {
Collector<Person, StringJoiner, String> personNameCollector =
Collector.of(
() -> {
System.out.println("supplier");
return new StringJoiner(" | ");
(j, p) -> {
System.out.format("accumulator: p=%s; j=%s\n", p, j);
j.add(p.name.toUpperCase());
(j1, j2) -> {
System.out.println("merge");
return j1.merge(j2);
j -> {
System.out.println("finisher");
return j.toString();
String names = persons
.collect(personNameCollector);
System.out.println(names);  // MAX | PETER | PAMELA | DAVID
public class Streams11 {
static class Person {
int age;
Person(String name, int age) {
this.age = age;
@Override
public String toString() {
return name;
List<Person> persons =
Arrays.asList(
new Person("Max", 18),
new Person("Peter", 23),
new Person("Pamela", 23),
new Person("David", 12));
//        test1(persons);
//        test2(persons);
//        test3(persons);
//        test4(persons);
//        test5(persons);
test6(persons);
private static void test1(List<Person> persons) {
.reduce((p1, p2) -> p1.age > p2.age ? p1 : p2)
.ifPresent(System.out::println);    // Pamela
private static void test2(List<Person> persons) {
Person result =
persons
.reduce(new Person("", 0), (p1, p2) -> {
p1.age += p2.age;
p1.name += p2.name;
return p1;
System.out.format("name=%s; age=%s", result.name, result.age);
private static void test3(List<Person> persons) {
.reduce(0, (sum, p) -> sum += p.age, (sum1, sum2) -> sum1 + sum2);
private static void test4(List<Person> persons) {
private static void test5(List<Person> persons) {
System.out.format("accumulator: sum=%s; person=%s\n", sum, p);
System.out.format("combiner: sum1=%s; sum2=%s\n", sum1, sum2);
private static void test6(List<Person> persons) {
Integer ageSum = persons
.reduce(0,
(sum, p) -> {
System.out.format("accumulator: sum=%s; person=%s; thread=%s\n",
sum, p, Thread.currentThread().getName());
return sum += p.age;
},
(sum1, sum2) -> {
System.out.format("combiner: sum1=%s; sum2=%s; thread=%s\n",
sum1, sum2, Thread.currentThread().getName());
return sum1 + sum2;
System.out.println(ageSum);
import java.util.concurrent.ForkJoinPool;
public class Streams12 {
List<String> strings = Arrays.asList("a1", "a2", "b1", "c2", "c1");
test3(strings);
//        test4();
List<String> values = new ArrayList<>(100);
for (int i = 0; i < 100; i++) {
long count = values
.count();
private static void test3(List<String> strings) {
System.out.format("sort:    %s <> %s [%s]\n", s1, s2, Thread.currentThread().getName());
private static void test2(List<String> strings) {
strings
.parallelStream()
System.out.format("filter:  %s [%s]\n", s, Thread.currentThread().getName());
System.out.format("map:     %s [%s]\n", s, Thread.currentThread().getName());
.forEach(s -> System.out.format("forEach: %s [%s]\n", s, Thread.currentThread().getName()));
// -Djava.util.concurrent.ForkJoinPool.common.parallelism=5
ForkJoinPool commonPool = ForkJoinPool.commonPool();
System.out.println(commonPool.getParallelism());
import java.security.SecureRandom;
public class Streams13 {
SecureRandom secureRandom = new SecureRandom(new byte[]{1, 3, 3, 7});
int[] randoms = IntStream.generate(secureRandom::nextInt)
.filter(n -> n > 0)
.limit(10)
System.out.println(Arrays.toString(randoms));
int[] nums = IntStream.iterate(1, n -> n * 2)
.limit(11)
.toArray();
System.out.println(Arrays.toString(nums));
public class Streams2 {
List<String> stringCollection = new ArrayList<>();
stringCollection.add("ddd2");
stringCollection.add("aaa2");
stringCollection.add("bbb1");
stringCollection.add("aaa1");
stringCollection.add("bbb3");
stringCollection.add("ccc");
stringCollection.add("bbb2");
stringCollection.add("ddd1");
// sorting
System.out.println(stringCollection);
import java.util.UUID;
import java.util.concurrent.TimeUnit;
public class Streams3 {
public static final int MAX = 1000000;
public static void sortSequential() {
long count = values.stream().sorted().count();
System.out.println(String.format("sequential sort took: %d ms", millis));
public static void sortParallel() {
List<String> values = new ArrayList<>(MAX);
for (int i = 0; i < MAX; i++) {
UUID uuid = UUID.randomUUID();
values.add(uuid.toString());
// sequential
long t0 = System.nanoTime();
long count = values.parallelStream().sorted().count();
System.out.println(count);
long t1 = System.nanoTime();
long millis = TimeUnit.NANOSECONDS.toMillis(t1 - t0);
System.out.println(String.format("parallel sort took: %d ms", millis));
sortSequential();
sortParallel();
import java.util.OptionalInt;
public class Streams4 {
for (int i = 0; i < 10; i++) {
if (i % 2 == 1) {
System.out.println(i);
.forEach(i -> {
if (i % 2 == 1) System.out.println(i);
.filter(i -> i % 2 == 1)
OptionalInt reduced1 =
.reduce((a, b) -> a + b);
System.out.println(reduced1.getAsInt());
int reduced2 =
IntStream.range(0, 10)
.reduce(7, (a, b) -> a + b);
System.out.println(reduced2);
import java.util.function.Supplier;
* Testing the order of execution.
*
public class Streams5 {
List<String> strings =
Arrays.asList("d2", "a2", "b1", "b3", "c");
//        test1(strings);
//        test2(strings);
//        test3(strings);
//        test4(strings);
//        test5(strings);
//        test6(strings);
//        test7(strings);
test8(strings);
private static void test8(List<String> stringCollection) {
Supplier<Stream<String>> streamSupplier =
() -> stringCollection
streamSupplier.get().anyMatch(s -> true);
streamSupplier.get().noneMatch(s -> true);
// stream has already been operated upon or closed
private static void test7(List<String> stringCollection) {
Stream<String> stream = stringCollection
.filter(s -> s.startsWith("a"));
stream.anyMatch(s -> true);
stream.noneMatch(s -> true);
// short-circuit
private static void test6(List<String> stringCollection) {
System.out.println("map:      " + s);
.anyMatch(s -> {
System.out.println("anyMatch: " + s);
});
private static void test5(List<String> stringCollection) {
// sorted = horizontal
private static void test4(List<String> stringCollection) {
.sorted((s1, s2) -> {
System.out.printf("sort:    %s; %s\n", s1, s2);
return s1.compareTo(s2);
return s.toLowerCase().startsWith("a");
private static void test3(List<String> stringCollection) {
return s.startsWith("a");
private static void test2(List<String> stringCollection) {
.map(s -> {
System.out.println("map:     " + s);
return s.toUpperCase();
return s.startsWith("A");
private static void test1(List<String> stringCollection) {
stringCollection
.filter(s -> {
System.out.println("filter:  " + s);
return true;
})
.forEach(s -> System.out.println("forEach: " + s));
import java.io.IOException;
import java.math.BigDecimal;
public class Streams6 {
public static void main(String[] args) throws IOException {
test1();
test3();
test4();
private static void test4() {
Stream
.of(new BigDecimal("1.2"), new BigDecimal("3.7"))
.mapToDouble(BigDecimal::doubleValue)
private static void test3() {
.range(0, 10)
private static void test2() {
.builder()
.add(1)
.add(3)
.add(5)
.add(7)
.add(11)
.build()
private static void test1() {
int[] ints = {1, 3, 5, 7, 11};
Arrays
.stream(ints)
import java.util.ArrayList;
import java.util.List;
public class Streams7 {
static class Foo {
List<Bar> bars = new ArrayList<>();
Foo(String name) {
static class Bar {
String name;
Bar(String name) {
this.name = name;
//        test1();
test2();
static void test2() {
.mapToObj(num -> new Foo("Foo" + num))
.peek(f -> IntStream.range(1, 4)
.mapToObj(num -> new Bar("Bar" + num + " <- " + f.name))
.forEach(f.bars::add))
static void test1() {
List<Foo> foos = new ArrayList<>();
.forEach(num -> foos.add(new Foo("Foo" + num)));
foos.forEach(f ->
IntStream
.range(1, 4)
.forEach(num -> f.bars.add(new Bar("Bar" + num + " <- " + f.name))));
foos.stream()
.flatMap(f -> f.bars.stream())
.forEach(b -> System.out.println(b.name));
}package com.winterbe.java8.samples.stream;
import java.util.stream.IntStream;
import java.util.stream.Stream;
public class Streams8 {
Arrays.asList("a1", "a2", "a3")
.findFirst()
Stream.of("a1", "a2", "a3")
.map(s -> s.substring(1))
.mapToInt(Integer::parseInt)
.max()
IntStream.range(1, 4)
Arrays.stream(new int[] {1, 2, 3})
.map(n -> 2 * n + 1)
.average()
.ifPresent(System.out::println);
Stream.of(1.0, 2.0, 3.0)
.mapToInt(Double::intValue)
.mapToObj(i -> "a" + i)
package com.winterbe.java8.samples.stream;
import java.util.Arrays;
/**
* @author Benjamin Winterberg
*/
public class Streams9 {
public static void main(String[] args) {
Arrays.asList("a1", "a2", "b1", "c2", "c1")
.stream()
.filter(s -> s.startsWith("c"))
.map(String::toUpperCase)
.sorted()
.forEach(System.out::println);
// C1
// C2
}