import java.util.concurrent.atomic.AtomicInteger;
public class Atomic1 {
private static final int NUM_INCREMENTS = 1000;
private static AtomicInteger atomicInt = new AtomicInteger(0);
testUpdate();
private static void testUpdate() {
atomicInt.updateAndGet(n -> n + 2);
System.out.format("Update: %d\n", atomicInt.get());
.forEach(i -> {
Runnable task = () ->
atomicInt.accumulateAndGet(i, (n, m) -> n + m);
executor.submit(task);
System.out.format("Accumulate: %d\n", atomicInt.get());
atomicInt.set(0);
.forEach(i -> executor.submit(atomicInt::incrementAndGet));
System.out.format("Increment: Expected=%d; Is=%d\n", NUM_INCREMENTS, atomicInt.get());
import java.util.concurrent.CompletableFuture;
public class CompletableFuture1 {
public static void main(String[] args) throws ExecutionException, InterruptedException {
CompletableFuture<String> future = new CompletableFuture<>();
future.complete("42");
future
.thenAccept(System.out::println)
.thenAccept(v -> System.out.println("done"));
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ForkJoinPool;
public class ConcurrentHashMap1 {
System.out.println("Parallelism: " + ForkJoinPool.getCommonPoolParallelism());
testForEach();
testSearch();
testReduce();
private static void testReduce() {
String reduced = map.reduce(1, (key, value) -> key + "=" + value,
(s1, s2) -> s1 + ", " + s2);
System.out.println(reduced);
private static void testSearch() {
System.out.println("\nsearch()\n");
String result1 = map.search(1, (key, value) -> {
if (key.equals("foo") && value.equals("bar")) {
return "foobar";
System.out.println(result1);
System.out.println("\nsearchValues()\n");
String result2 = map.searchValues(1, value -> {
System.out.println(Thread.currentThread().getName());
if (value.length() > 3) {
return value;
return null;
System.out.println(result2);
private static void testForEach() {
ConcurrentHashMap<String, String> map = new ConcurrentHashMap<>();
map.putIfAbsent("foo", "bar");
map.putIfAbsent("han", "solo");
map.putIfAbsent("r2", "d2");
map.putIfAbsent("c3", "p0");
map.forEach(1, (key, value) -> System.out.printf("key: %s; value: %s; thread: %s\n", key, value, Thread.currentThread().getName()));
//        map.forEach(5, (key, value) -> System.out.printf("key: %s; value: %s; thread: %s\n", key, value, Thread.currentThread().getName()));
System.out.println(map.mappingCount());
public class ConcurrentUtils {
public static void stop(ExecutorService executor) {
executor.awaitTermination(60, TimeUnit.SECONDS);
public static void sleep(int seconds) {
public class Executors1 {
test1(3);
//        test1(7);
private static void test1(long seconds) {
ExecutorService executor = Executors.newSingleThreadExecutor();
TimeUnit.SECONDS.sleep(seconds);
String name = Thread.currentThread().getName();
System.out.println("task finished: " + name);
stop(executor);
static void stop(ExecutorService executor) {
System.out.println("attempt to shutdown executor");
executor.awaitTermination(5, TimeUnit.SECONDS);
System.err.println("termination interrupted");
if (!executor.isTerminated()) {
System.err.println("killing non-finished tasks");
System.out.println("shutdown finished");
import java.util.concurrent.Future;
import java.util.concurrent.TimeoutException;
public class Executors2 {
public static void main(String[] args) throws ExecutionException, InterruptedException, TimeoutException {
//        test1();
test3();
private static void test3() throws InterruptedException, ExecutionException, TimeoutException {
future.get(1, TimeUnit.SECONDS);
private static void test2() throws InterruptedException, ExecutionException {
future.get();
private static void test1() throws InterruptedException, ExecutionException {
ExecutorService executor = Executors.newFixedThreadPool(1);
Future<Integer> future = executor.submit(() -> {
return 123;
throw new IllegalStateException("task interrupted", e);
Integer result = future.get();
System.out.println("future done: " + future.isDone());
System.out.print("result: " + result);
executor.shutdownNow();
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
public class Executors3 {
public static void main(String[] args) throws InterruptedException, ExecutionException {
//        test4();
//        test5();
private static void test5() throws InterruptedException, ExecutionException {
callable("task1", 2),
callable("task2", 1),
callable("task3", 3));
String result = executor.invokeAny(callables);
System.out.println(result);
private static Callable<String> callable(String result, long sleepSeconds) {
return () -> {
TimeUnit.SECONDS.sleep(sleepSeconds);
return result;
private static void test4() throws InterruptedException {
ExecutorService executor = Executors.newWorkStealingPool();
List<Callable<String>> callables = Arrays.asList(
() -> "task1",
() -> "task2",
() -> "task3");
executor.invokeAll(callables)
.stream()
.map(future -> {
return future.get();
catch (Exception e) {
})
.forEach(System.out::println);
executor.shutdown();
Runnable task = () -> {
TimeUnit.SECONDS.sleep(2);
System.out.println("Scheduling: " + System.nanoTime());
System.err.println("task interrupted");
executor.scheduleWithFixedDelay(task, 0, 1, TimeUnit.SECONDS);
int initialDelay = 0;
int period = 1;
executor.scheduleAtFixedRate(task, initialDelay, period, TimeUnit.SECONDS);
private static void test1() throws InterruptedException {
ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
Runnable task = () -> System.out.println("Scheduling: " + System.nanoTime());
int delay = 3;
ScheduledFuture<?> future = executor.schedule(task, delay, TimeUnit.SECONDS);
TimeUnit.MILLISECONDS.sleep(1337);
long remainingDelay = future.getDelay(TimeUnit.MILLISECONDS);
System.out.printf("Remaining Delay: %sms\n", remainingDelay);
public class Lock1 {
private static ReentrantLock lock = new ReentrantLock();
testLock();
private static void testLock() {
.forEach(i -> executor.submit(Lock1::increment));
import java.util.concurrent.locks.ReentrantLock;
public class Lock2 {
ReentrantLock lock = new ReentrantLock();
lock.lock();
lock.unlock();
System.out.println("Locked: " + lock.isLocked());
System.out.println("Held by me: " + lock.isHeldByCurrentThread());
boolean locked = lock.tryLock();
System.out.println("Lock acquired: " + locked);
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
public class Lock3 {
ReadWriteLock lock = new ReentrantReadWriteLock();
lock.writeLock().lock();
lock.writeLock().unlock();
lock.readLock().lock();
lock.readLock().unlock();
import java.util.HashMap;
import java.util.Map;
public class Lock4 {
Map<String, String> map = new HashMap<>();
map.put("foo", "bar");
lock.unlockWrite(stamp);
Runnable readTask = () -> {
System.out.println(map.get("foo"));
lock.unlockRead(stamp);
executor.submit(readTask);
public class Lock5 {
long stamp = lock.tryOptimisticRead();
ConcurrentUtils.sleep(1);
System.out.println("Optimistic Lock Valid: " + lock.validate(stamp));
long stamp = lock.writeLock();
System.out.println("Write Lock acquired");
ConcurrentUtils.sleep(2);
System.out.println("Write done");
import java.util.concurrent.locks.StampedLock;
public class Lock6 {
StampedLock lock = new StampedLock();
executor.submit(() -> {
long stamp = lock.readLock();
if (count == 0) {
stamp = lock.tryConvertToWriteLock(stamp);
if (stamp == 0L) {
System.out.println("Could not convert to write lock");
stamp = lock.writeLock();
count = 23;
lock.unlock(stamp);
});
import java.util.concurrent.atomic.LongAccumulator;
import java.util.function.LongBinaryOperator;
public class LongAccumulator1 {
testAccumulate();
private static void testAccumulate() {
LongBinaryOperator op = (x, y) -> 2 * x + y;
LongAccumulator accumulator = new LongAccumulator(op, 1L);
.forEach(i -> executor.submit(() -> accumulator.accumulate(i)));
System.out.format("Add: %d\n", accumulator.getThenReset());
import java.util.concurrent.atomic.LongAdder;
public class LongAdder1 {
private static LongAdder adder = new LongAdder();
testAdd();
private static void testAdd() {
.forEach(i -> executor.submit(() -> adder.add(2)));
System.out.format("Add: %d\n", adder.sumThenReset());
.forEach(i -> executor.submit(adder::increment));
System.out.format("Increment: Expected=%d; Is=%d\n", NUM_INCREMENTS, adder.sumThenReset());
public class Semaphore1 {
private static Semaphore semaphore = new Semaphore(1);
testIncrement();
private static void testIncrement() {
.forEach(i -> executor.submit(Semaphore1::increment));
System.out.println("Increment: " + count);
permit = semaphore.tryAcquire(5, TimeUnit.SECONDS);
count++;
throw new RuntimeException("could not increment");
finally {
import java.util.concurrent.Semaphore;
public class Semaphore2 {
private static Semaphore semaphore = new Semaphore(5);
ExecutorService executor = Executors.newFixedThreadPool(10);
IntStream.range(0, 10)
.forEach(i -> executor.submit(Semaphore2::doWork));
private static void doWork() {
boolean permit = false;
permit = semaphore.tryAcquire(1, TimeUnit.SECONDS);
System.out.println("Semaphore acquired");
ConcurrentUtils.sleep(5);
} else {
System.out.println("Could not acquire semaphore");
} catch (InterruptedException e) {
throw new IllegalStateException(e);
} finally {
if (permit) {
semaphore.release();
public class Synchronized1 {
testNonSyncIncrement();
.forEach(i -> executor.submit(Synchronized1::incrementSync));
System.out.println("   Sync: " + count);
private static void testNonSyncIncrement() {
.forEach(i -> executor.submit(Synchronized1::increment));
System.out.println("NonSync: " + count);
private static synchronized void incrementSync() {
private static void increment() {
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.stream.IntStream;
public class Synchronized2 {
private static final int NUM_INCREMENTS = 10000;
private static int count = 0;
testSyncIncrement();
private static void testSyncIncrement() {
count = 0;
ExecutorService executor = Executors.newFixedThreadPool(2);
IntStream.range(0, NUM_INCREMENTS)
.forEach(i -> executor.submit(Synchronized2::incrementSync));
ConcurrentUtils.stop(executor);
System.out.println(count);
private static void incrementSync() {
synchronized (Synchronized2.class) {
count = count + 1;
package com.winterbe.java8.samples.concurrent;
import java.util.concurrent.TimeUnit;
/**
* @author Benjamin Winterberg
*/
public class Threads1 {
public static void main(String[] args) {
test1();
//        test2();
//        test3();
private static void test3() {
TimeUnit.SECONDS.sleep(1);
private static void test2() {
try {
System.out.println("Foo " + Thread.currentThread().getName());
Thread.sleep(1000);
System.out.println("Bar " + Thread.currentThread().getName());
catch (InterruptedException e) {
e.printStackTrace();
private static void test1() {
Runnable runnable = () -> {
String threadName = Thread.currentThread().getName();
System.out.println("Hello " + threadName);
};
runnable.run();
Thread thread = new Thread(runnable);
thread.start();
System.out.println("Done!");
}
