import java.lang.annotation.ElementType;
import java.lang.annotation.Repeatable;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
public class Annotations1 {
@Target({ElementType.TYPE_PARAMETER, ElementType.TYPE_USE})
@interface MyAnnotation {
@interface Hints {
Hint[] value();
@Repeatable(Hints.class)
@Retention(RetentionPolicy.RUNTIME)
@interface Hint {
String value();
@Hint("hint1")
@Hint("hint2")
class Person {
Hint hint = Person.class.getAnnotation(Hint.class);
System.out.println(hint);   // null
Hints hints1 = Person.class.getAnnotation(Hints.class);
System.out.println(hints1.value().length);  // 2
Hint[] hints2 = Person.class.getAnnotationsByType(Hint.class);
System.out.println(hints2.length);  // 2
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
* Utilities for hassle-free usage of lambda expressions who throw checked exceptions.
public final class CheckedFunctions {
public interface CheckedConsumer<T> {
void accept(T input) throws Exception;
public interface CheckedPredicate<T> {
boolean test(T input) throws Exception;
@FunctionalInterface
public interface CheckedFunction<F, T> {
T apply(F input) throws Exception;
* Return a function which rethrows possible checked exceptions as runtime exception.
* @param function
* @param <F>
public static <F, T> Function<F, T> function(CheckedFunction<F, T> function) {
return function.apply(input);
* Return a predicate which rethrows possible checked exceptions as runtime exception.
* @param predicate
public static <T> Predicate<T> predicate(CheckedPredicate<T> predicate) {
return predicate.test(input);
* Return a consumer which rethrows possible checked exceptions as runtime exception.
*
* @param consumer
* @param <T>
* @return
public static <T> Consumer<T> consumer(CheckedConsumer<T> consumer) {
return input -> {
consumer.accept(input);
catch (Exception e) {
if (e instanceof RuntimeException) {
throw (RuntimeException) e;
throw new RuntimeException(e);
};
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;
public class Concurrency1 {
ConcurrentHashMap<Integer, UUID> concurrentHashMap = new ConcurrentHashMap<>();
for (int i = 0; i < 100; i++) {
concurrentHashMap.put(i, UUID.randomUUID());
int threshold = 1;
concurrentHashMap.forEachValue(threshold, System.out::println);
concurrentHashMap.forEach((id, uuid) -> {
if (id % 10 == 0) {
System.out.println(String.format("%s: %s", id, uuid));
UUID searchResult = concurrentHashMap.search(threshold, (id, uuid) -> {
if (String.valueOf(uuid).startsWith(String.valueOf(id))) {
return uuid;
return null;
});
System.out.println(searchResult);
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
public class Files1 {
public static void main(String[] args) throws IOException {
testWalk();
testFind();
testList();
testLines();
testReader();
testWriter();
testReadWriteLines();
testReaderLines();
private static void testReaderLines() throws IOException {
long countPrints = reader
.lines()
System.out.println(countPrints);
private static void testWriter() throws IOException {
Path path = Paths.get("res/output.js");
try (BufferedWriter writer = Files.newBufferedWriter(path)) {
writer.write("print('Hello World');");
private static void testReader() throws IOException {
Path path = Paths.get("res/nashorn1.js");
try (BufferedReader reader = Files.newBufferedReader(path)) {
System.out.println(reader.readLine());
private static void testWalk() throws IOException {
try (Stream<Path> stream = Files.walk(start, maxDepth)) {
.filter(path -> path.endsWith(".js"))
System.out.println("walk(): " + joined);
private static void testFind() throws IOException {
Path start = Paths.get("");
int maxDepth = 5;
try (Stream<Path> stream = Files.find(start, maxDepth, (path, attr) ->
String.valueOf(path).endsWith(".js"))) {
System.out.println("find(): " + joined);
private static void testList() throws IOException {
try (Stream<Path> stream = Files.list(Paths.get(""))) {
String joined = stream
.map(String::valueOf)
.filter(path -> !path.startsWith("."))
.collect(Collectors.joining("; "));
System.out.println("list(): " + joined);
private static void testLines() throws IOException {
try (Stream<String> stream = Files.lines(Paths.get("res/nashorn1.js"))) {
stream
.filter(line -> line.contains("print"))
.map(String::trim)
.forEach(System.out::println);
private static void testReadWriteLines() throws IOException {
List<String> lines = Files.readAllLines(Paths.get("res/nashorn1.js"));
lines.add("print('foobar');");
Files.write(Paths.get("res", "nashorn1-modified.js"), lines);
import java.util.HashMap;
import java.util.Map;
public class Maps1 {
Map<Integer, String> map = new HashMap<>();
for (int i = 0; i < 10; i++) {
map.putIfAbsent(i, "val" + i);
map.forEach((id, val) -> System.out.println(val));
map.computeIfPresent(3, (num, val) -> val + num);
map.computeIfPresent(9, (num, val) -> null);
System.out.println(map.containsKey(9));     // false
map.computeIfAbsent(23, num -> "val" + num);
System.out.println(map.containsKey(23));    // true
map.computeIfAbsent(3, num -> "bam");
System.out.println(map.getOrDefault(42, "not found"));      // not found
map.remove(3, "val3");
System.out.println(map.get(3));             // val33
map.remove(3, "val33");
System.out.println(map.get(3));             // null
map.merge(9, "val9", (value, newValue) -> value.concat(newValue));
System.out.println(map.get(9));             // val9
map.merge(9, "concat", (value, newValue) -> value.concat(newValue));
System.out.println(map.get(9));             // val9concat
}package com.winterbe.java8.samples.misc;
public class Math1 {
testMathExact();
testUnsignedInt();
private static void testUnsignedInt() {
Integer.parseUnsignedInt("-123", 10);
System.out.println(e.getMessage());
long maxUnsignedInt = (1l << 32) - 1;
System.out.println(maxUnsignedInt);
String string = String.valueOf(maxUnsignedInt);
int unsignedInt = Integer.parseUnsignedInt(string, 10);
System.out.println(unsignedInt);
String string2 = Integer.toUnsignedString(unsignedInt, 10);
System.out.println(string2);
Integer.parseInt(string, 10);
catch (NumberFormatException e) {
System.err.println("could not parse signed int of " + maxUnsignedInt);
private static void testMathExact() {
System.out.println(Integer.MAX_VALUE);
System.out.println(Integer.MAX_VALUE + 1);
Math.addExact(Integer.MAX_VALUE, 1);
try {
Math.toIntExact(Long.MAX_VALUE);
catch (ArithmeticException e) {
System.err.println(e.getMessage());
package com.winterbe.java8.samples.misc;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import java.util.stream.Stream;
/**
* @author Benjamin Winterberg
*/
public class String1 {
public static void main(String[] args) {
testJoin();
testChars();
testPatternPredicate();
testPatternSplit();
private static void testChars() {
String string = "foobar:foo:bar"
.chars()
.distinct()
.mapToObj(c -> String.valueOf((char) c))
.collect(Collectors.joining());
private static void testPatternSplit() {
String string = Pattern.compile(":")
.splitAsStream("foobar:foo:bar")
.filter(s -> s.contains("bar"))
.sorted()
.collect(Collectors.joining(":"));
private static void testPatternPredicate() {
long count = Stream.of("bob@gmail.com", "alice@hotmail.com")
.filter(Pattern.compile(".*@gmail\\.com").asPredicate())
.count();
System.out.println(count);
private static void testJoin() {
String string = String.join(":", "foobar", "foo", "bar");
System.out.println(string);
}