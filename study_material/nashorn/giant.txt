package com.winterbe.java8.samples.nashorn;
import com.winterbe.java8.samples.lambda.Person;
import javax.script.Invocable;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import java.io.FileReader;
import java.time.LocalDateTime;
import java.util.Date;
/**
 * Calling javascript functions from java with nashorn.
 *
 * @author Benjamin Winterberg
 */
public class Nashorn1 {
    public static void main(String[] args) throws Exception {
        ScriptEngine engine = new ScriptEngineManager().getEngineByName("nashorn");
        engine.eval(new FileReader("res/nashorn1.js"));
        Invocable invocable = (Invocable) engine;
        Object result = invocable.invokeFunction("fun1", "Peter Parker");
        System.out.println(result);
        System.out.println(result.getClass());
        invocable.invokeFunction("fun2", new Date());
        invocable.invokeFunction("fun2", LocalDateTime.now());
        invocable.invokeFunction("fun2", new Person());
    }
}package com.winterbe.java8.samples.nashorn;
import jdk.nashorn.api.scripting.NashornScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import java.util.concurrent.TimeUnit;
/**
 * @author Benjamin Winterberg
 */
public class Nashorn10 {
    public static void main(String[] args) throws ScriptException, NoSuchMethodException {
        NashornScriptEngine engine = (NashornScriptEngine) new ScriptEngineManager().getEngineByName("nashorn");
        engine.eval("load('res/nashorn10.js')");
        long t0 = System.nanoTime();
        for (int i = 0; i < 100000; i++) {
            engine.invokeFunction("testPerf");
        }
        long took = System.nanoTime() - t0;
        System.out.format("Elapsed time: %d ms", TimeUnit.NANOSECONDS.toMillis(took));
    }
}
package com.winterbe.java8.samples.nashorn;
import jdk.nashorn.api.scripting.NashornScriptEngine;
import javax.script.Bindings;
import javax.script.ScriptContext;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import javax.script.SimpleBindings;
import javax.script.SimpleScriptContext;
/**
 * @author Benjamin Winterberg
 */
public class Nashorn11 {
    public static void main(String[] args) throws Exception {
//        test1();
//        test2();
//        test3();
//        test4();
//        test5();
//        test6();
//        test7();
        test8();
    }
    private static void test8() throws ScriptException {
        NashornScriptEngine engine = createEngine();
        engine.eval("var obj = { foo: 23 };");
        ScriptContext defaultContext = engine.getContext();
        Bindings defaultBindings = defaultContext.getBindings(ScriptContext.ENGINE_SCOPE);
        SimpleScriptContext context1 = new SimpleScriptContext();
        context1.setBindings(defaultBindings, ScriptContext.ENGINE_SCOPE);
        SimpleScriptContext context2 = new SimpleScriptContext();
        context2.getBindings(ScriptContext.ENGINE_SCOPE).put("obj", defaultBindings.get("obj"));
        engine.eval("obj.foo = 44;", context1);
        engine.eval("print(obj.foo);", context1);
        engine.eval("print(obj.foo);", context2);
    }
    private static void test7() throws ScriptException {
        NashornScriptEngine engine = createEngine();
        engine.eval("var foo = 23;");
        ScriptContext defaultContext = engine.getContext();
        Bindings defaultBindings = defaultContext.getBindings(ScriptContext.ENGINE_SCOPE);
        SimpleScriptContext context1 = new SimpleScriptContext();
        context1.setBindings(defaultBindings, ScriptContext.ENGINE_SCOPE);
        SimpleScriptContext context2 = new SimpleScriptContext();
        context2.getBindings(ScriptContext.ENGINE_SCOPE).put("foo", defaultBindings.get("foo"));
        engine.eval("foo = 44;", context1);
        engine.eval("print(foo);", context1);
        engine.eval("print(foo);", context2);
    }
    private static void test6() throws ScriptException {
        NashornScriptEngine engine = createEngine();
        ScriptContext defaultContext = engine.getContext();
        defaultContext.getBindings(ScriptContext.GLOBAL_SCOPE).put("foo", "hello");
        ScriptContext customContext = new SimpleScriptContext();
        customContext.setBindings(defaultContext.getBindings(ScriptContext.ENGINE_SCOPE), ScriptContext.ENGINE_SCOPE);
        Bindings bindings = new SimpleBindings();
        bindings.put("foo", "world");
        customContext.setBindings(bindings, ScriptContext.GLOBAL_SCOPE);
//        engine.eval("foo = 23;");                 // overrides foo in all contexts, why???
        engine.eval("print(foo)");                  // hello
        engine.eval("print(foo)", customContext);   // world
        engine.eval("print(foo)", defaultContext);  // hello
    }
    private static void test5() throws ScriptException {
        NashornScriptEngine engine = createEngine();
        engine.eval("var obj = { foo: 'foo' };");
        engine.eval("function printFoo() { print(obj.foo) };");
        ScriptContext defaultContext = engine.getContext();
        Bindings defaultBindings = defaultContext.getBindings(ScriptContext.ENGINE_SCOPE);
        SimpleScriptContext context1 = new SimpleScriptContext();
        context1.setBindings(defaultBindings, ScriptContext.ENGINE_SCOPE);
        SimpleScriptContext context2 = new SimpleScriptContext();
        context2.setBindings(defaultBindings, ScriptContext.ENGINE_SCOPE);
        engine.eval("obj.foo = 'bar';", context1);
        engine.eval("printFoo();", context1);
        engine.eval("printFoo();", context2);
    }
    private static void test4() throws ScriptException {
        NashornScriptEngine engine = createEngine();
        engine.eval("function foo() { print('bar') };");
        ScriptContext defaultContext = engine.getContext();
        Bindings defaultBindings = defaultContext.getBindings(ScriptContext.ENGINE_SCOPE);
        SimpleScriptContext context = new SimpleScriptContext();
        context.setBindings(defaultBindings, ScriptContext.ENGINE_SCOPE);
        engine.eval("foo();", context);
        System.out.println(context.getAttribute("foo"));
    }
    private static void test3() throws ScriptException {
        NashornScriptEngine engine = createEngine();
        ScriptContext defaultContext = engine.getContext();
        Bindings defaultBindings = defaultContext.getBindings(ScriptContext.ENGINE_SCOPE);
        SimpleScriptContext context = new SimpleScriptContext();
        context.setBindings(defaultBindings, ScriptContext.ENGINE_SCOPE);
        engine.eval("function foo() { print('bar') };", context);
        engine.eval("foo();", context);
        Bindings bindings = context.getBindings(ScriptContext.ENGINE_SCOPE);
        System.out.println(bindings.get("foo"));
        System.out.println(context.getAttribute("foo"));
    }
    private static void test2() throws ScriptException {
        NashornScriptEngine engine = createEngine();
        engine.eval("function foo() { print('bar') };");
        SimpleScriptContext context = new SimpleScriptContext();
        engine.eval("print(Function);", context);
        engine.eval("foo();", context);
    }
    private static void test1() throws ScriptException {
        NashornScriptEngine engine = createEngine();
        engine.eval("function foo() { print('bar') };");
        engine.eval("foo();");
    }
    private static NashornScriptEngine createEngine() {
        return (NashornScriptEngine) new ScriptEngineManager().getEngineByName("nashorn");
    }
}
package com.winterbe.java8.samples.nashorn;
import jdk.nashorn.api.scripting.ScriptObjectMirror;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import java.io.FileReader;
import java.util.Arrays;
/**
 * Calling java methods from javascript with nashorn.
 *
 * @author Benjamin Winterberg
 */
public class Nashorn2 {
    public static String fun(String name) {
        System.out.format("Hi there from Java, %s", name);
        return "greetings from java";
    }
    public static void fun2(Object object) {
        System.out.println(object.getClass());
    }
    public static void fun3(ScriptObjectMirror mirror) {
        System.out.println(mirror.getClassName() + ": " + Arrays.toString(mirror.getOwnKeys(true)));
    }
    public static void fun4(ScriptObjectMirror person) {
        System.out.println("Full Name is: " + person.callMember("getFullName"));
    }
    public static void main(String[] args) throws Exception {
        ScriptEngine engine = new ScriptEngineManager().getEngineByName("nashorn");
        engine.eval(new FileReader("res/nashorn2.js"));
    }
}package com.winterbe.java8.samples.nashorn;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
/**
 * Working with java types from javascript.
 *
 * @author Benjamin Winterberg
 */
public class Nashorn3 {
    public static void main(String[] args) throws Exception {
        ScriptEngine engine = new ScriptEngineManager().getEngineByName("nashorn");
        engine.eval("load('res/nashorn3.js')");
    }
}package com.winterbe.java8.samples.nashorn;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
/**
 * Working with java types from javascript.
 *
 * @author Benjamin Winterberg
 */
public class Nashorn4 {
    public static void main(String[] args) throws Exception {
        ScriptEngine engine = new ScriptEngineManager().getEngineByName("nashorn");
        engine.eval("loadWithNewGlobal('res/nashorn4.js')");
    }
}package com.winterbe.java8.samples.nashorn;
import javax.script.Invocable;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
/**
 * Bind java objects to custom javascript objects.
 *
 * @author Benjamin Winterberg
 */
public class Nashorn5 {
    public static void main(String[] args) throws Exception {
        ScriptEngine engine = new ScriptEngineManager().getEngineByName("nashorn");
        engine.eval("load('res/nashorn5.js')");
        Invocable invocable = (Invocable) engine;
        Product product = new Product();
        product.setName("Rubber");
        product.setPrice(1.99);
        product.setStock(1037);
        Object result = invocable.invokeFunction("getValueOfGoods", product);
        System.out.println(result);
    }
}package com.winterbe.java8.samples.nashorn;
import jdk.nashorn.api.scripting.ScriptObjectMirror;
import javax.script.Invocable;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
/**
 * Using Backbone Models from Nashorn.
 *
 * @author Benjamin Winterberg
 */
public class Nashorn6 {
    public static void main(String[] args) throws Exception {
        ScriptEngine engine = new ScriptEngineManager().getEngineByName("nashorn");
        engine.eval("load('res/nashorn6.js')");
        Invocable invocable = (Invocable) engine;
        Product product = new Product();
        product.setName("Rubber");
        product.setPrice(1.99);
        product.setStock(1337);
        ScriptObjectMirror result = (ScriptObjectMirror)
                invocable.invokeFunction("calculate", product);
        System.out.println(result.get("name") + ": " + result.get("valueOfGoods"));
    }
    public static void getProduct(ScriptObjectMirror result) {
        System.out.println(result.get("name") + ": " + result.get("valueOfGoods"));
    }
}package com.winterbe.java8.samples.nashorn;
import javax.script.Invocable;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
/**
 * @author Benjamin Winterberg
 */
public class Nashorn7 {
    public static class Person {
        private String name;
        public String getName() {
            return name;
        }
        public void setName(String name) {
            this.name = name;
        }
        public int getLengthOfName() {
            return name.length();
        }
    }
    public static void main(String[] args) throws ScriptException, NoSuchMethodException {
        ScriptEngine engine = new ScriptEngineManager().getEngineByName("nashorn");
        engine.eval("function foo(predicate, obj) { return !!(eval(predicate)); };");
        Invocable invocable = (Invocable) engine;
        Person person = new Person();
        person.setName("Hans");
        String predicate = "obj.getLengthOfName() >= 4";
        Object result = invocable.invokeFunction("foo", predicate, person);
        System.out.println(result);
    }
}
package com.winterbe.java8.samples.nashorn;
import com.winterbe.java8.samples.lambda.Person;
import jdk.nashorn.api.scripting.NashornScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
/**
 * @author Benjamin Winterberg
 */
public class Nashorn8 {
    public static void main(String[] args) throws ScriptException, NoSuchMethodException {
        NashornScriptEngine engine = (NashornScriptEngine) new ScriptEngineManager().getEngineByName("nashorn");
        engine.eval("load('res/nashorn8.js')");
        engine.invokeFunction("evaluate1");                             // [object global]
        engine.invokeFunction("evaluate2");                             // [object Object]
        engine.invokeFunction("evaluate3", "Foobar");                   // Foobar
        engine.invokeFunction("evaluate3", new Person("John", "Doe"));  // [object global] <- ???????
    }
}
package com.winterbe.java8.samples.nashorn;
import jdk.nashorn.api.scripting.NashornScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import java.util.concurrent.TimeUnit;
/**
 * @author Benjamin Winterberg
 */
public class Nashorn9 {
    public static void main(String[] args) throws ScriptException, NoSuchMethodException {
        NashornScriptEngine engine = (NashornScriptEngine) new ScriptEngineManager().getEngineByName("nashorn");
        engine.eval("load('res/nashorn9.js')");
        long t0 = System.nanoTime();
        double result = 0;
        for (int i = 0; i < 1000; i++) {
            double num = (double) engine.invokeFunction("testPerf");
            result += num;
        }
        System.out.println(result > 0);
        long took = System.nanoTime() - t0;
        System.out.format("Elapsed time: %d ms", TimeUnit.NANOSECONDS.toMillis(took));
    }
}
package com.winterbe.java8.samples.nashorn;
/**
 * @author Benjamin Winterberg
 */
public class Product {
    private String name;
    private double price;
    private int stock;
    private double valueOfGoods;
    public double getValueOfGoods() {
        return valueOfGoods;
    }
    public void setValueOfGoods(double valueOfGoods) {
        this.valueOfGoods = valueOfGoods;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public double getPrice() {
        return price;
    }
    public void setPrice(double price) {
        this.price = price;
    }
    public int getStock() {
        return stock;
    }
    public void setStock(int stock) {
        this.stock = stock;
    }
}package com.winterbe.java8.samples.nashorn;
/**
 * @author Benjamin Winterberg
 */
public class SuperRunner implements Runnable {
    @Override
    public void run() {
        System.out.println("super run");
    }
}